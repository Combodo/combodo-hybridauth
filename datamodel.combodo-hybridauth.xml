<?xml version="1.0" encoding="UTF-8"?>
<itop_design xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0">
  <constants>
  </constants>
  <classes>
    <class id="HybridAuthProvisioning" _delta="define">
      <parent>DBObject</parent>
      <properties>
        <category>bizmodel</category>
        <abstract>false</abstract>
        <key_type>autoincrement</key_type>
        <db_table>priv_hybridauth_provisioning</db_table>
        <db_key_field>id</db_key_field>
        <naming>
          <format/>
          <attributes/>
        </naming>
        <display_template/>
        <icon/>
        <reconciliation/>
      </properties>
      <fields/>
      <methods>
        <method id="DoProvisioning">
          <comment>	/**
	 * @param string $sLoginMode: SSO login mode
	 * @param string $sEmail: login/email of user being currently provisioned
	 * @param \Hybridauth\User\Profile $oUserProfile : hybridauth GetUserInfo object response (coming from Oauth2 IdP provider)
	 *
	 * @return array: array includes the 2 provisioned objects [Person, UserExternal]
	 * @throws \Combodo\iTop\HybridAuth\HybridProvisioningAuthException
	 */
          </comment>
          <static>false</static>
          <access>public</access>
          <type>Custom</type>
          <code><![CDATA[	public function DoProvisioning(string $sLoginMode, string $sEmail, Hybridauth\User\Profile $oUserProfile) : array
          {
		return Combodo\iTop\HybridAuth\Service\ProvisioningService::GetInstance()->DoProvisioning($sLoginMode, $sEmail, $oUserProfile);
	}]]></code>
        </method>
        <method id="FindPerson">
          <comment>	/**
	 * Search is based on email (\LoginWebPage::FindPerson). For tricky reconciliations, please extend this method.
	 * @param string $sLoginMode: SSO login mode
	 * @param string $sEmail: login/email of user being currently provisioned
	 * @param \Hybridauth\User\Profile $oUserProfile : hybridauth GetUserInfo object response (coming from Oauth2 IdP provider)
	 *
	 * @return \Person|null
	 */
          </comment>
          <static>false</static>
          <access>public</access>
          <type>Custom</type>
          <code><![CDATA[	public function FindPerson(string $sLoginMode, string $sEmail, Hybridauth\User\Profile $oUserProfile) : ?\Person
          {
		return \LoginWebPage::FindPerson($sEmail);
	}]]></code>
        </method>
        <method id="FindUserExternal">
          <comment>	/**
	 * Search is based on email (\LoginWebPage::FindPerson). For tricky reconciliations, please extend this method.
	 * @param string $sLoginMode: SSO login mode
	 * @param string $sEmail: login/email of user being currently provisioned
	 * @param \Hybridauth\User\Profile $oUserProfile : hybridauth GetUserInfo object response (coming from Oauth2 IdP provider)
	 *
	 * @return \UserExternal|null
	 */
          </comment>
          <static>false</static>
          <access>public</access>
          <type>Custom</type>
          <code><![CDATA[	public function FindUserExternal(string $sLoginMode, string $sEmail, Hybridauth\User\Profile $oUserProfile) : ?\UserExternal
          {
		return \MetaModel::GetObjectByName('UserExternal', $sEmail, false);
	}]]></code>
        </method>
        <method id="CompletePersonProvisioningBeforeDbWrite">
          <comment>/**
	 * Current method is called at the end of person provisioning, just after attaching organization and allowed_orgs. and before DBWrite call.
	 * @param string $sLoginMode
	 * @param string $sEmail
	 * @param \Person $oPerson
	 * @param \Hybridauth\User\Profile $oUserProfile
	 * @param array $aAdditionalParams: reference to additional user fields to update
	 *
	 * @return void
	 */</comment>
          <static>false</static>
          <access>public</access>
          <type>Custom</type>
          <code><![CDATA[	public function CompleteUserProvisioningBeforeDbWrite(string $sLoginMode, string $sEmail, \Person $oPerson, \UserExternal $oUser, \Hybridauth\User\Profile $oUserProfile, string $sInfo) : void
	{
	  //Custom Code...
	}]]></code>
        </method>
      </methods>
      <presentation/>
    </class>
  </classes>
  <menus>
  </menus>
  <user_rights>
    <groups>
    </groups>
    <profiles>
    </profiles>
  </user_rights>
</itop_design>
